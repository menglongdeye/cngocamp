# builder选择了golang:1.13.5-alpine3.10作为编译的基础镜像，相比于golang:1.13, 一方面是因为它体积更小
# 另一方面是我发现golang:1.13的编译结果，在alpine:3.10中会报not found的错误
FROM golang:1.13.5-alpine3.10 AS builder

WORKDIR /build
# 接着是创建了一个app-runner的用户, -D表示无密码。
# 此用户的信息是是需要拷到final中，作为应用程序的启动用户。这是为了避免使用container中的默认用户root，那可是有安全漏洞的
RUN adduser -u 10001 -D app-runner

# 配置了国内的代理，安装依赖包了
ENV GOPROXY https://goproxy.cn
# 这里用go mod download的好处是下次构建镜像文件时，当go.mod和go.sum没有改变时，它是有缓存的，可以避免重复下载依赖包，加快构建。
COPY go.mod .
COPY go.sum .
RUN go mod download

# builder的最后，就是把当前目录的文件拷过去，编译代码了
COPY . .
RUN CGO_ENABLED=0 GOARCH=amd64 GOOS=linux go build -a -o lcl-http-server .

# final选择了alpine:3.10,一方面是体积小，只有5m；另一方面也是和构建镜像的alpine版本保持一致
FROM alpine:3.10 AS final

# 把构建结果、配置文件（有的话）和用户的相关文件拷过去
WORKDIR /app
COPY --from=builder /build/lcl-http-server /app/
#COPY --from=builder /build/config /app/config
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# 没有它，container启动时就是用root用户启动了!!! 如果被攻击了，那黑客可是就有root权限了
USER app-runner
# 最后，设置一个ENTRYPOINT，完事!
ENTRYPOINT ["/app/lcl-http-server"]